# Copyright (c) 2018 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


import os

include('../common.aurora')

#----------------------------------------------------------------------------------------------------
###
# Params which can be modified by exporting environment variables.
###

tensorflow_inference_image_tag = os.environ.get('tensorflow_inference_image_tag')  # Workaround for "force pull images" defect in Aurora.
#----------------------------------------------------------------------------------------------------


# Add label for identification workload in prometheus.
wrapper_labels["name"] = 'tensorflow_benchmark--%s' % workload_uniq_id
wrapper_labels["load_generator"] = ""
wrapper_labels["application"] = "tensorflow_benchmark_prediction"
apms_kafka_topic_name="owca_apms_tensorflow_benchmark_prediction"

# resources parameters
cpu = 1
ram = 50 * GB
disk = 50 * GB

# JOB definitions
jobs = [
    Job(
        name='tensorflow_benchmark_prediction--%s' % workload_uniq_id,
        cluster=cluster,
        environment='staging' + env_uniq_id,
        role=role,
        enable_hooks=True,
        constraints=dict(own_ip=application_host_ip),
        container=Mesos(image=DockerImage(
            name=docker_registry + '/serenity/tensorflow-benchmark', tag='latest',
        )),
        task=SequentialTask(
            name='tensorflow_benchmark--%s' % workload_uniq_id,
            resources=Resources(cpu=cpu, ram=ram,disk=disk),
            processes=[
                Process(
                    name='tensorflow_benchmark_prediction',
#                    cmdline="/usr/bin/python3 /root/benchmarks/scripts/tf_cnn_benchmarks/tf_cnn_benchmarks.py --eval=True --datasets_use_prefetch=True --batch_group_size=1 --device=cpu --data_format=NHWC --data_name=cifar10 --batch_size=128 --model=resnet56 --train_dir=/saved_model/ --num_epochs=5 --num_intra_threads=10 --num_inter_threads=10")
 
                    cmdline="/tensorflow_benchmark_prediction_wrapper.pex --command '/usr/bin/python3 -u /root/benchmarks/scripts/tf_cnn_benchmarks/tf_cnn_benchmarks.py --eval=True --datasets_use_prefetch=True --batch_group_size=1 --device=cpu --data_format=NHWC --data_name=cifar10 --batch_size=8 --model=resnet56 --train_dir=/saved_model/ --num_epochs=200 --num_intra_threads=1 --num_inter_threads=1' "
                            "--metric_name_prefix 'tensorflow_benchmark_' "
                            "--stderr 0 --kafka_brokers '{kafka_brokers}' --kafka_topic {kafka_topic} "
                            "--log_level {log_level} "
                            "--labels \"{labels}\"".format(kafka_brokers=wrapper_kafka_brokers,
                                                           log_level=wrapper_log_level,
                                                           kafka_topic=apms_kafka_topic_name,
                                                           labels=str(wrapper_labels)))
            ],
        )
    )
]

hooks = [AddMetadata(wrapper_labels)]
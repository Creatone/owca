# Copyright (c) 2018 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


import os

include('../common.aurora')

#----------------------------------------------------------------------------------------------------
###
# Params which can be modified by exporting environment variables.
###

cassandra_stress_image_tag = os.environ.get('cassandra_stress_image_tag')  # Workaround for "force pull images" defect in Aurora.
#----------------------------------------------------------------------------------------------------


# Add label for identification workload in prometheus.
wrapper_labels["name"] = 'cassandra_stress--%s' % workload_uniq_id
wrapper_labels["load_generator"] = ""
wrapper_labels["application"] = "cassandra_stress"
apms_kafka_topic_name="owca_apms_cassandra_stress"

loops=200

cassandra_warmup_cmd='"' + 'cassandra-stress write duration=30s -pop seq=1..1000000 -node %s -rate threads=14' % application_host_ip + '"'

cassandra_stress_cmd='"'+'cassandra-stress mixed duration=90s -pop seq=1..1000000 -node %s -rate threads=8' % application_host_ip +'"'

# resources parameters
cpu = 20
ram = 20 * GB
disk = 50 * GB

# JOB definitions
jobs = [
    Job(
        name='cassandra_stress--%s' % workload_uniq_id,
        cluster=cluster,
        environment='staging' + env_uniq_id,
        role=role,
        enable_hooks=True,
        constraints=dict(own_ip=load_generator_host_ip),
        container=Mesos(image=DockerImage(
            name=docker_registry + '/serenity/cassandra', tag='latest',
        )),
        task=SequentialTask(
            name='cassandra_stress--%s' % workload_uniq_id,
            resources=Resources(cpu=cpu, ram=ram, disk=disk),
            processes=[
                Process(
                    name='cassandra_warmper',
                    cmdline='cassandra-stress write duration=30s -pop seq=1..1000000 -node %s -rate threads=14'%application_host_ip
                    ),
             Process(
                    name='cassandra_stress_run',

                    cmdline="/usr/bin/cassandra_stress_wrapper.pex --command '/stress/loop_cassandra_stress.sh {loops} {cassandra_stress_cmd} ' "
                            "--metric_name_prefix 'cassandra_stress_' "
                            "--stderr 0 --kafka_brokers '{kafka_brokers}' --kafka_topic {kafka_topic} "
                            "--log_level {log_level} "
                            "--labels \"{labels}\"".format(loops=loops,
                                                           cassandra_stress_cmd=cassandra_stress_cmd,
                                                           kafka_brokers=wrapper_kafka_brokers,
                                                           log_level=wrapper_log_level,
                                                           kafka_topic=apms_kafka_topic_name,
                                                           labels=str(wrapper_labels)))

            ],
        )
    )
]

hooks = [AddMetadata(wrapper_labels)]

import os

include('../common.aurora')

# Port that Cassnadra will bind to.
cassandra_port = os.environ.get('cassandra_port', '9042')

# Number of QpS send to cassandra (default: 1000;
# if `ycsb_amplitude` and `ycsb_period` are set - maximum of a sine curve).
ycsb_target = os.environ.get('ycsb_target', '1000')
# Number of YCSB threads.
ycsb_thread_count = os.environ.get('ycsb_thread_count', '1')
# ycsb_period and ycsb_amplitiude are used to generate non-constant number of QpS;
# see: http://jwilson.coe.uga.edu/EMAT6680/Dunbar/Assignment1/sine_curves_KD.html.
ycsb_period = os.environ.get('ycsb_period', '100')
ycsb_amplitiude = os.environ.get('ycsb_amplitiude', '100')

# Workarounds for "force pull images" defect in Aurora.
ycsb_image_tag = 'wrapper-3'
cassandra_image_tag = '3.11.3'

# JOB definitions
jobs = [
  Service(
    name='cassandra-%s' % workload_uniq_id,
    cluster=cluster,
    environment='staging'+env_uniq_id,
    role=user,
    container=Mesos(
      image=DockerImage(
        # using generic cassandra image
        name='cassandra',
        tag=cassandra_image_tag,
      ),
    ),
    constraints=dict(own_ip=workload_host_ip),
    task=SequentialTask(
      name='cassandra-%s' % workload_uniq_id,
      resources=Resources(cpu=8, ram=2*GB, disk=10*GB),
      processes=[
        Process(
          name='prep_configs',
          cmdline="""
            set -x &&
            sed -i 's/native_transport_port: 9042/native_transport_port: {cassandra_port}/' /etc/cassandra/cassandra.yaml
            && sed -i 's/storage_port: 7000/storage_port: {{thermos.ports[storage_port]}}/' /etc/cassandra/cassandra.yaml
            && sed -i 's/JMX_PORT=\"7199\"/JMX_PORT=\"{{thermos.ports[jmx_port]}}\"/' /etc/cassandra/cassandra-env.sh
            """.format(cassandra_port=cassandra_port)
        ),
        Process(
          name='cassandra',
          cmdline='env CASSANDRA_CONFIG=/etc/cassandra /docker-entrypoint.sh'
        ),
      ],
    ),
  ),
  Service(
    name='ycsb_cassandra-%s' % workload_uniq_id,
    cluster=cluster,
    environment='staging'+env_uniq_id,
    role=user,
    constraints=dict(own_ip=load_generator_host_ip),
    container=Mesos(image=DockerImage(
      name=docker_registry+'/serenity/ycsb', tag=ycsb_image_tag,
    )),
    task=SequentialTask(
      name='ycsb_cassandra-%s' % workload_uniq_id,
      resources=Resources(cpu=1.5, ram=2*GB, disk=10*GB),
      processes=[
        Process(
          name='ycsb_cassandra_create_structure',
          cmdline="""
            cqlsh --cqlversion 3.4.4
            -e "create keyspace ycsb WITH REPLICATION = {'class' : 'SimpleStrategy', 'replication_factor': 1 };"
            {cassandra_address} {cassandra_port};
            cqlsh --cqlversion 3.4.4 -k ycsb
            -e "create table usertable (y_id varchar primary key, field0 varchar, field1 varchar, field2 varchar,
            field3 varchar, field4 varchar, field5 varchar, field6 varchar, field7 varchar, field8 varchar,
            field9 varchar);"
            {cassandra_address} {cassandra_port};
          """.format(cassandra_address=workload_host_ip, cassandra_port=cassandra_port),
        ),
        Process(
          name='ycsb_cassandra_load',
          cmdline="""
            cd /opt/ycsb;
            ./bin/ycsb load cassandra2-cql
            -s
            -P workloads/workloada
            -p hosts={cassandra_host}
            -p port={cassandra_port}
            -p status.interval=1
            -p threadcount=20;
          """.format(cassandra_host=workload_host_ip, cassandra_port=cassandra_port),
        ),
        Process(
          name='ycsb_cassandra_run',
          cmdline="""
            cd /opt/ycsb;
            ycsb_wrapper.pex
            --command "/opt/ycsb/bin/ycsb run cassandra2-cql -s
            -P workloads/workloada
            -p hosts={workload_host_ip}
            -p port={cassandra_port}
            -target {ycsb_target}
            -p status.interval=1
            -p threadcount={ycsb_thread_count}
            -p workload.peroid={ycsb_period}
            -p workload.amplitude={ycsb_amplitiude}
            -p workload.phase=0
            -p operationcount=10000000"
            --prometheus_port {prometheus_port}
            --prometheus_ip "{prometheus_ip}"
            --stderr 1 --kafka_brokers "{kafka_brokers}"
            --log_level {log_level}
            --labels "{labels}"
          """.format(
            workload_host_ip=workload_host_ip,
            cassandra_port=cassandra_port,
            ycsb_target=ycsb_target,
            ycsb_thread_count=ycsb_thread_count,
            ycsb_period=ycsb_period,
            ycsb_amplitiude=ycsb_amplitiude,
            prometheus_port=wrapper_prometheus_port,
            prometheus_ip=workload_host_ip,
            kafka_brokers=wrapper_kafka_brokers,
            log_level=wrapper_log_level,
            labels=str(wrapper_labels)),
        )
      ],
    ),
  )
]

import os

include('../common.aurora')

# tensorflow_train specific parameters.
workload_uniq_id = workload_uniq_id or wrapper_prometheus_port  # set by default to prometheus port
tf_train_batch_size = os.environ.get('tf_train_batch_size', '100')
tf_train_epochs = os.environ.get('tf_train_epochs', '100')

tf_train_image_tag = 'train-4'  # Workaround for "force pull images" defect in Aurora.

# resources parameters
cpu = 8
ram = 2 * GB
disk = 2 * GB

# JOB definitions
jobs = [
    Service(
        name='tf_train-%s' % workload_uniq_id,
        cluster=cluster,
        environment='staging' + env_uniq_id,
        role=user,
        constraints=dict(own_ip=workload_host_ip),
        container=Mesos(image=DockerImage(
            name=docker_registry + '/serenity/tf_train', tag=tf_train_image_tag,
        )),
        task=SequentialTask(
            name='tf_train-%s' % workload_uniq_id,
            resources=Resources(cpu=cpu, ram=ram, disk=disk),
            processes=[
                Process(
                    name='tf_train_run',
                    cmdline="/wrapper.pex --command 'training --dataset_path '/' --batch_size {batch_size} "
                            "--epochs {epochs}' "
                            "--prometheus_port {prometheus_port} "
                            "--prometheus_ip '{prometheus_ip}' "
                            "--stderr 0 --kafka_brokers '{kafka_brokers}' "
                            "--log_level {log_level} "
                            "--labels \"{labels}\"".format(batch_size=tf_train_batch_size,
                                                           epochs=tf_train_epochs,
                                                           prometheus_port=wrapper_prometheus_port,
                                                           prometheus_ip=workload_host_ip,
                                                           kafka_brokers=wrapper_kafka_brokers,
                                                           log_level=wrapper_log_level,
                                                           labels=str(wrapper_labels)
                                                           )
                )
            ],
        )
    )
]

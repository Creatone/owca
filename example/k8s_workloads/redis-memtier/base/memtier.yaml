apiVersion: apps/v1
kind: StatefulSet

metadata:
  name: memtier

spec:
  #replicas: 0
  serviceName: redis
  selector:
    matchLabels:
      app: memtier
  podManagementPolicy: Parallel
  template:
    metadata:
      labels:
        app: memtier
    spec:
      terminationGracePeriodSeconds: 0
      nodeSelector:
        goal: load_generator
      containers:
        - name: memtier
          image: 100.64.176.12:80/wca/memtier_benchmark:e12ffdeaeaa12f8d9470bde0ed78b2a78cf855bc
          command:
            - bash
            - -c
            - 'shopt -s extglob; export identifier=${podname#memtier-}; export service=${identifier%-+([[:digit:]])};
            taskset -c $cpus memtier_benchmark --run-count=1 --json-out-file=/tmp/memtier_benchmark --server=redis-${identifier}.redis-${service} --threads=$threads --clients=$clients --pipeline=$pipeline --data-size=$datasize --random-data --hide-histogram --requests=allkeys --key-pattern=P:P --key-maximum=$keymaximum --ratio 1:0
            &&
            taskset -c $cpus sh -c "while true; do memtier_benchmark --run-count=9999 --test-time=6000 --server=redis-${identifier}.redis-${service} --threads=$threads --clients=$clients --pipeline=$pipeline --data-size=$datasize --random-data --hide-histogram --key-maximum=$keymaximum --key-pattern=G:G --ratio $ratio $extra 2>&1 | awk ''BEGIN { RS = "\r" }{ print $0 }'' 1>&2; done"'

          env:
            - name: podname
              valueFrom: {fieldRef: {fieldPath: metadata.name}}
            - name: threads
              valueFrom: {configMapKeyRef: { name: memtier, key: threads }}
            - name: clients
              valueFrom: {configMapKeyRef: { name: memtier, key: clients }}
            - name: pipeline
              valueFrom: {configMapKeyRef: { name: memtier, key: pipeline }}
            - name: datasize
              valueFrom: {configMapKeyRef: { name: memtier, key: datasize }}
            - name: keymaximum
              valueFrom: {configMapKeyRef: { name: memtier, key: keymaximum }}
            - name: ratio
              valueFrom: {configMapKeyRef: { name: memtier, key: ratio }}
            - name: cpus
              valueFrom: {configMapKeyRef: { name: memtier, key: cpus }}
            - name: extra
              valueFrom: {configMapKeyRef: { name: memtier, key: extra }}
          volumeMounts:
            - name: var-log-wrapper
              mountPath: /var/log/wrapper


      volumes:
        - name: var-log-wrapper
          emptyDir: {}

  # required for workaround bug with kustomize https://github.com/kubernetes-sigs/kustomize/issues/504
  # when using commonLabels
  # fixed in 2.1.0 https://github.com/kubernetes-sigs/kustomize/commit/c470982ce5b96da82a757f088a842bb05d3bcdb4
  volumeClaimTemplates: []


apiVersion: v1
kind: Service
metadata:
  name: memcached
spec:
  clusterIP: None
  selector:
    app: memcached
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mutilate
  labels:
    workload: memcached
spec:
  replicas: 0
  serviceName: memcached
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      app: mutilate
  template:
    metadata:
      labels:
        app: mutilate
    spec:
      containers:
        - name: mutilate
          image: bplotka/mutilate
          env:
            - name: mutilate_threads
              valueFrom: {configMapKeyRef: { name: memcached, key: mutilate_threads }}
            - name: qps
              valueFrom: {configMapKeyRef: { name: memcached, key: qps }}
            - name: time
              valueFrom: {configMapKeyRef: { name: memcached, key: time }}
            - name: conns
              valueFrom: {configMapKeyRef: { name: memcached, key: conns }}
            - name: records
              valueFrom: {configMapKeyRef: { name: memcached, key: records }}
            - name: value
              valueFrom: {configMapKeyRef: { name: memcached, key: value }}
            - name: mutilate_extra
              valueFrom: {configMapKeyRef: { name: memcached, key: mutilate_extra }}
            - name: mutilate_cpus
              valueFrom: {configMapKeyRef: { name: memcached, key: mutilate_cpus }}
            - name: podname
              valueFrom: {fieldRef: {fieldPath: metadata.name}}
          command:
            - bash
            - -c
            - "./mutilate -T 1 -s memcached-${podname:9:100}.memcached:11211 --loadonly -r $records -V $value -v && \
               taskset -c $mutilate_cpus ./mutilate -C $conns -T $mutilate_threads -t $time -s memcached-${podname:9:100}.memcached:11211 --noload --scan $qps:$qps:0 -r $records -V $value $mutilate_extra"
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: memcached
  labels:
    workload: memcached
spec:
  replicas: 0
  serviceName: memcached
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      app: memcached
  template:
    metadata:
      labels:
        app: memcached
    spec:
      containers:
        - name: memcached
          env:
            - name: memcached_threads
              valueFrom: {configMapKeyRef: { name: memcached, key: memcached_threads }}
            - name: memcached_cpus
              valueFrom: {configMapKeyRef: { name: memcached, key: memcached_cpus }}
            - name: memory
              valueFrom: {configMapKeyRef: { name: memcached, key: memory }}
            - name: memcached_extra
              valueFrom: {configMapKeyRef: { name: memcached, key: memcached_extra }}
          image: memcached
          command:
            - sh
            - -c
            - "taskset -c $memcached_cpus memcached -t $memcached_threads -m $memory -u root $memcached_extra"



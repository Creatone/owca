<source>
  @type prometheus
</source>

<source>
  @type tail
  path /var/log/containers/*.log
  pos_file /var/log/fluentd-containers.log.pos
  time_format %Y-%m-%dT%H:%M:%S.%NZ
  tag kubernetes.*
  format json
  read_from_head true
</source>
<filter kubernetes.**>
  @type kubernetes_metadata
</filter>
<match kubernetes.var.log.containers.**fluentd**.log>
  @type null
</match>
<match kubernetes.var.log.containers.**monitoring**.log>
  @type null
</match>

<filter kubernetes.var.log.containers.stress**>
  @type parser
  key_name log
  reserve_data true
  <parse>
    @type regexp
    expression /^stress-ng: info: {2}\[(?<id>\d*)\]+ Time (?<time>\d*), counter (?<value>\d*)/
    time_format %s
    types value:integer
  </parse>
</filter>

<filter kubernetes.var.log.containers.stress**>
  @type parser
  key_name log
  reserve_data true
  <parse>
    @type multi_format
    <pattern>
        format regexp
        expression /^(.*?)stress-ng: info:(.*?)\[\d*\](.*?)(?<bogo_ops>\d+.\d*)(.*?)(?<real_time>\d+.\d*)(.*?)(?<user_time>\d+.\d*)(.*?)(?<system_time>\d+.\d*)(.*?)(?<bogo_ops_per_second_real_time>\d+.\d*)(.*?)(?<bogo_ops_per_second_usr_sys_time>\d+.\d*)/
        types bogo_ops:float, real_time:float, user_time:float, system_time:float, bogo_ops_per_second_real_time:float, bogo_ops_per_second_usr_sys_time:float
    </pattern>
    <pattern>
        format regexp
        expression /^stress-ng: info: {2}\[(?<id>\d*)\]+ Time (?<time>\d*), counter (?<value>\d*)/
        types value:integer
    </pattern>
    time_format %s
  </parse>
</filter>

<filter kubernetes.var.log.containers.stress**>
  @type prometheus
  <metric>
    name stress_ng_bogo_ops_counter
    type counter
    desc Counter bogo ops per proc stress-ng, updated per 1 sec
    key value
    <labels>
      hostname ${hostname}
      app $.kubernetes.labels.app
      workload $.kubernetes.labels.workload
      namespace $.kubernetes.namespace_name
    </labels>
  </metric>
</filter>

<filter kubernetes.var.log.containers.stress**>
  @type prometheus
  <metric>
    name stress_ng_bogo_ops
    type gauge
    desc Summary bogo ops
    key bogo_ops
    <labels>
      hostname ${hostname}
      app $.kubernetes.labels.app
      workload $.kubernetes.labels.workload
      namespace $.kubernetes.namespace_name
    </labels>
  </metric>
</filter>

<filter kubernetes.var.log.containers.stress**>
  @type prometheus
  <metric>
    name stress_ng_real_time
    type gauge
    desc Summary real_time (secs)
    key real_time
    <labels>
      hostname ${hostname}
      app $.kubernetes.labels.app
      workload $.kubernetes.labels.workload
      namespace $.kubernetes.namespace_name
    </labels>
  </metric>
</filter>

<filter kubernetes.var.log.containers.stress**>
  @type prometheus
  <metric>
    name stress_ng_user_time
    type gauge
    desc Summary user_time (secs)
    key user_time
    <labels>
      hostname ${hostname}
      app $.kubernetes.labels.app
      workload $.kubernetes.labels.workload
      namespace $.kubernetes.namespace_name
    </labels>
  </metric>
</filter>

<filter kubernetes.var.log.containers.stress**>
  @type prometheus
  <metric>
    name stress_ng_system_time
    type gauge
    desc Summary system_time (secs)
    key user_time
    <labels>
      hostname ${hostname}
      app $.kubernetes.labels.app
      workload $.kubernetes.labels.workload
      namespace $.kubernetes.namespace_name
    </labels>
  </metric>
</filter>

<filter kubernetes.var.log.containers.stress**>
  @type prometheus
  <metric>
    name stress_ng_bogo_ops_per_second_real_time
    type gauge
    desc Summary bogo ops/s real time
    key bogo_ops_per_second_real_time
    <labels>
      hostname ${hostname}
      app $.kubernetes.labels.app
      workload $.kubernetes.labels.workload
      namespace $.kubernetes.namespace_name
    </labels>
  </metric>
</filter>

<filter kubernetes.var.log.containers.stress**>
  @type prometheus
  <metric>
    name stress_ng_bogo_ops_per_second_usr_sys_time
    type gauge
    desc Summary bogo ops/s usr+sys time
    key bogo_ops_per_second_usr_sys_time
    <labels>
      hostname ${hostname}
      app $.kubernetes.labels.app
      workload $.kubernetes.labels.workload
      namespace $.kubernetes.namespace_name
    </labels>
  </metric>
</filter>

<filter kubernetes.var.log.containers.stress**>
  @type prometheus
  <metric>
    name stress_ng_stdout_lines
    type counter
    desc stdout_lines
    <labels>
      hostname ${hostname}
      app $.kubernetes.labels.app
      workload $.kubernetes.labels.workload
      namespace $.kubernetes.namespace_name
    </labels>
  </metric>
</filter>

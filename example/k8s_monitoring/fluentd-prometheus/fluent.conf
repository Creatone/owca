<source>
  @type prometheus
</source>

<source>
  @type tail
  path /var/log/containers/*.log
  pos_file /var/log/fluentd-containers.log.pos
  time_format %Y-%m-%dT%H:%M:%S.%NZ
  tag kubernetes.*
  format json
  read_from_head true
</source>
<filter kubernetes.**>
  @type kubernetes_metadata
</filter>
<match kubernetes.var.log.containers.**fluentd**.log>
  @type null
</match>
<match kubernetes.var.log.containers.**monitoring**.log>
  @type null
</match>

<system>
  log_level debug
</system>

# ----------------------------------------------------------- Stress-ng metrics
<filter kubernetes.var.log.containers.stress**>
  @type parser
  #@log_level trace
  key_name log
  reserve_data true
  <parse>
    ### BUG here: to second regexp is too broad and catches all the
    #@type multi_format
    #<pattern>
    #    format regexp
    #    expression /^stress-ng: info:.*Time (?<time>\d*), counter (?<value>\d*)/
    #    types value:integer,time:string
    #    time_format %s
    #</pattern>
    #<pattern>
    #    format regexp
    #    expression /^(.*?)stress-ng: info:(.*?)\[\d*\](.*?)(?<bogo_ops>\d+.\d*)(.*?)(?<real_time>\d+.\d*)(.*?)(?<user_time>\d+.\d*)(.*?)(?<system_time>\d+.\d*)(.*?)(?<bogo_ops_per_second_real_time>\d+.\d*)(.*?)(?<bogo_ops_per_second_usr_sys_time>\d+.\d*)/
    #    types bogo_ops:float, real_time:float, user_time:float, system_time:float, bogo_ops_per_second_real_time:float, bogo_ops_per_second_usr_sys_time:float
    #</pattern>
    ### Because any parser errors are ignored, it easy to misconfigure above patterns !!!!
    ### TO DEBUG ISSUES WITH PARTICULAR above patterns just enable this with the same configuration
    @type regexp
    #expression /^(.*?)stress-ng: info:(.*?)\[\d*\](.*?)(?<bogo_ops>\d+.\d*)(.*?)(?<real_time>\d+.\d*)(.*?)(?<user_time>\d+.\d*)(.*?)(?<system_time>\d+.\d*)(.*?)(?<bogo_ops_per_second_real_time>\d+.\d*)(.*?)(?<bogo_ops_per_second_usr_sys_time>\d+.\d*)/
    #types bogo_ops:float, real_time:float, user_time:float, system_time:float, bogo_ops_per_second_real_time:float, bogo_ops_per_second_usr_sys_time:float
    expression /^stress-ng: info:.*Time (?<time>\d*), counter (?<value>\d*)/
    types value:integer,time:string
    time_format %s
  </parse>
</filter>

<filter kubernetes.var.log.containers.stress**>
  @type prometheus
  <metric>
    name apm__stress_ng_bogo_ops_counter
    type counter
    desc Counter bogo ops per proc stress-ng, updated per 1 sec
    key value
    <labels>
      # task_name ${.kubernetes.namespace_name}/${.kubernetes.pod_name}
      podname $.kubernetes.pod_name
      hostname ${hostname}
      app $.kubernetes.labels.app
      workload $.kubernetes.labels.workload
      namespace $.kubernetes.namespace_name
    </labels>
  </metric>
</filter>

<filter kubernetes.var.log.containers.stress**>
  @type prometheus
  <metric>
    name apm__stress_ng_bogo_ops
    type gauge
    desc Summary bogo ops
    key bogo_ops
    <labels>
      # task_name ${.kubernetes.namespace_name}/${.kubernetes.pod_name}
      podname $.kubernetes.pod_name
      hostname ${hostname}
      app $.kubernetes.labels.app
      workload $.kubernetes.labels.workload
      namespace $.kubernetes.namespace_name
    </labels>
  </metric>
</filter>

<filter kubernetes.var.log.containers.stress**>
  @type prometheus
  <metric>
    name apm__stress_ng_real_time
    type gauge
    desc Summary real_time (secs)
    key real_time
    <labels>
      # task_name ${.kubernetes.namespace_name}/${.kubernetes.pod_name}
      podname $.kubernetes.pod_name
      hostname ${hostname}
      app $.kubernetes.labels.app
      workload $.kubernetes.labels.workload
      namespace $.kubernetes.namespace_name
    </labels>
  </metric>
</filter>

<filter kubernetes.var.log.containers.stress**>
  @type prometheus
  <metric>
    name apm__stress_ng_user_time
    type gauge
    desc Summary user_time (secs)
    key user_time
    <labels>
      # task_name ${.kubernetes.namespace_name}/${.kubernetes.pod_name}
      podname $.kubernetes.pod_name
      hostname ${hostname}
      app $.kubernetes.labels.app
      workload $.kubernetes.labels.workload
      namespace $.kubernetes.namespace_name
    </labels>
  </metric>
</filter>

<filter kubernetes.var.log.containers.stress**>
  @type prometheus
  <metric>
    name apm__stress_ng_system_time
    type gauge
    desc Summary system_time (secs)
    key user_time
    <labels>
      # task_name ${.kubernetes.namespace_name}/${.kubernetes.pod_name}
      podname $.kubernetes.pod_name
      hostname ${hostname}
      app $.kubernetes.labels.app
      workload $.kubernetes.labels.workload
      namespace $.kubernetes.namespace_name
    </labels>
  </metric>
</filter>

<filter kubernetes.var.log.containers.stress**>
  @type prometheus
  <metric>
    name apm__stress_ng_bogo_ops_per_second_real_time
    type gauge
    desc Summary bogo ops/s real time
    key bogo_ops_per_second_real_time
    <labels>
      # task_name ${.kubernetes.namespace_name}/${.kubernetes.pod_name}
      podname $.kubernetes.pod_name
      hostname ${hostname}
      app $.kubernetes.labels.app
      workload $.kubernetes.labels.workload
      namespace $.kubernetes.namespace_name
    </labels>
  </metric>
</filter>

<filter kubernetes.var.log.containers.stress**>
  @type prometheus
  <metric>
    name apm__stress_ng_bogo_ops_per_second_usr_sys_time
    type gauge
    desc Summary bogo ops/s usr+sys time
    key bogo_ops_per_second_usr_sys_time
    <labels>
      # task_name ${.kubernetes.namespace_name}/${.kubernetes.pod_name}
      podname $.kubernetes.pod_name
      hostname ${hostname}
      app $.kubernetes.labels.app
      workload $.kubernetes.labels.workload
      namespace $.kubernetes.namespace_name
    </labels>
  </metric>
</filter>

<filter kubernetes.var.log.containers.stress**>
  @type prometheus
  <metric>
    name apm__stress_ng_stdout_lines
    type counter
    desc stdout_lines
    <labels>
      # task_name ${.kubernetes.namespace_name}/${.kubernetes.pod_name}
      podname $.kubernetes.pod_name
      hostname ${hostname}
      app $.kubernetes.labels.app
      workload $.kubernetes.labels.workload
      namespace $.kubernetes.namespace_name
    </labels>
  </metric>
</filter>


# --------------------------------------------------------------- Mutilate metrics
<filter kubernetes.var.log.containers.mutilate**>
  @type parser
  key_name log
  reserve_data true
  <parse>
    @type multi_format
    <pattern>
        format regexp
        expression /^read(.*?)(?<avg>\d+.\d*)(.*?)(?<std>\d+.\d*)(.*?)(?<min>\d+.\d*)(.*?)(?<fifth>\d+.\d*)(.*?)(?<tenth>\d+.\d*)(.*?)(?<ninetieth>\d+.\d*)(.*?)(?<ninetyfith>\d+.\d*)(.*?)(?<ninetyninth>\d+.\d*)(.*?)(?<qps>\d+.\d*)(.*?)(?<target>\d+.\d*)/
        types avg:float, std:float, min:float, fifth:float, tenth:float, ninetieth:float, ninetyfith:float, ninetyninth:float, qps:float, target:float
    </pattern>
    time_format %s
  </parse>
</filter>

<filter kubernetes.var.log.containers.mutilate**>
  @type prometheus
  <metric>
    name apm__mutilate_scan_qps
    type gauge
    desc QPS
    key qps
    <labels>
      # task_name ${.kubernetes.namespace_name}/${.kubernetes.pod_name}
      podname $.kubernetes.pod_name
      hostname ${hostname}
      app $.kubernetes.labels.app
      workload $.kubernetes.labels.workload
      namespace $.kubernetes.namespace_name
    </labels>
  </metric>
</filter>

<filter kubernetes.var.log.containers.mutilate**>
  @type prometheus
  <metric>
    name apm__mutilate_scan_read_avg
    type gauge
    desc Average
    key avg
    <labels>
      # task_name ${.kubernetes.namespace_name}/${.kubernetes.pod_name}
      podname $.kubernetes.pod_name
      hostname ${hostname}
      app $.kubernetes.labels.app
      workload $.kubernetes.labels.workload
      namespace $.kubernetes.namespace_name
    </labels>
  </metric>
</filter>

<filter kubernetes.var.log.containers.mutilate**>
  @type prometheus
  <metric>
    name apm__mutilate_scan_read_p90
    type gauge
    desc 90th percentile of read latency
    key ninetieth
    <labels>
      # task_name ${.kubernetes.namespace_name}/${.kubernetes.pod_name}
      podname $.kubernetes.pod_name
      hostname ${hostname}
      app $.kubernetes.labels.app
      workload $.kubernetes.labels.workload
      namespace $.kubernetes.namespace_name
    </labels>
  </metric>
</filter>

<filter kubernetes.var.log.containers.mutilate**>
  @type prometheus
  <metric>
    name apm__mutilate_scan_read_p95
    type gauge
    desc 95th percentile of read latency
    key ninetyfith
    <labels>
      # task_name ${.kubernetes.namespace_name}/${.kubernetes.pod_name}
      podname $.kubernetes.pod_name
      hostname ${hostname}
      app $.kubernetes.labels.app
      workload $.kubernetes.labels.workload
      namespace $.kubernetes.namespace_name
    </labels>
  </metric>
</filter>

<filter kubernetes.var.log.containers.mutilate**>
  @type prometheus
  <metric>
    name apm__mutilate_scan_read_p99
    type gauge
    desc 99th percentile of read latency
    key ninetyninth
    <labels>
      # task_name ${.kubernetes.namespace_name}/${.kubernetes.pod_name}
      podname $.kubernetes.pod_name
      hostname ${hostname}
      app $.kubernetes.labels.app
      workload $.kubernetes.labels.workload
      namespace $.kubernetes.namespace_name
    </labels>
  </metric>
</filter>

<filter kubernetes.var.log.containers.mutilate**>
  @type prometheus
  <metric>
    name apm__mutilate_stdout_lines
    type counter
    desc stdout_lines
    <labels>
      # task_name ${.kubernetes.namespace_name}/${.kubernetes.pod_name}
      podname $.kubernetes.pod_name
      hostname ${hostname}
      app $.kubernetes.labels.app
      workload $.kubernetes.labels.workload
      namespace $.kubernetes.namespace_name
    </labels>
  </metric>
</filter>


# --------------------------------------------------------------------------------- Sysbench
<filter kubernetes.var.log.containers.sysbench**>
  @type parser
  key_name log
  reserve_data true
  <parse>
    @type multi_format
    <pattern>
        format regexp
        expression /^(.*?)\[(.*?)\d*\](.*?)(?<sysbench_qps>\d+.\d*)(.*?)MiB\/sec/
        types sysbench_qps:float
    </pattern>
  </parse>
</filter>

<filter kubernetes.var.log.containers.sysbench**>
  @type prometheus
  <metric>
    name apm__sysbench_qps
    type gauge
    desc QPS MiB/sec
    key sysbench_qps
    <labels>
      # task_name ${.kubernetes.namespace_name}/${.kubernetes.pod_name}
      podname $.kubernetes.pod_name
      hostname ${hostname}
      app $.kubernetes.labels.app
      workload $.kubernetes.labels.workload
      namespace $.kubernetes.namespace_name
    </labels>
  </metric>
</filter>

<filter kubernetes.var.log.containers.sysbench**>
  @type prometheus
  <metric>
    name apm__sysbench_stdout_lines
    type counter
    desc stdout_lines
    <labels>
      # task_name ${.kubernetes.namespace_name}/${.kubernetes.pod_name}
      podname $.kubernetes.pod_name
      hostname ${hostname}
      app $.kubernetes.labels.app
      workload $.kubernetes.labels.workload
      namespace $.kubernetes.namespace_name
    </labels>
  </metric>
</filter>


# --------------------------------------------------------------------- Memtier
<filter kubernetes.var.log.containers.memtier**>
  @type parser
  key_name log
  reserve_data true
  <parse>
    @type multi_format
    <pattern>
        format regexp
        expression /^\[RUN (.*?)\](.*?)threads:(.*?)(?<memtier_ops>\d+) ops,(.*?)(?<memtier_ops_per_second>\d+)(.*?)ops\/sec, (?<memtier_mb_per_sec>\d+.\d*)MB\/sec(.*?), (?<memtier_latency>\d+.\d*)(.*?)msec latency/
        types memtier_ops:float, memtier_latency:float
    </pattern>
  </parse>
</filter>

<filter kubernetes.var.log.containers.memtier**>
  @type prometheus
  <metric>
    name apm__memtier_ops
    type gauge
    desc OPS
    key memtier_ops
    <labels>
      # task_name ${.kubernetes.namespace_name}/${.kubernetes.pod_name}
      podname $.kubernetes.pod_name
      hostname ${hostname}
      app $.kubernetes.labels.app
      workload $.kubernetes.labels.workload
      namespace $.kubernetes.namespace_name
    </labels>
  </metric>
</filter>

<filter kubernetes.var.log.containers.memtier**>
  @type prometheus
  <metric>
    name apm__memtier_latency
    type gauge
    desc latency
    key memtier_latency
    <labels>
      # task_name ${.kubernetes.namespace_name}/${.kubernetes.pod_name}
      podname $.kubernetes.pod_name
      hostname ${hostname}
      app $.kubernetes.labels.app
      workload $.kubernetes.labels.workload
      namespace $.kubernetes.namespace_name
    </labels>
  </metric>
</filter>

<filter kubernetes.var.log.containers.memtier**>
  @type prometheus
  <metric>
    name apm__memtier_stdout_lines
    type counter
    desc stdout_lines
    <labels>
      # task_name ${.kubernetes.namespace_name}/${.kubernetes.pod_name}
      podname $.kubernetes.pod_name
      hostname ${hostname}
      app $.kubernetes.labels.app
      workload $.kubernetes.labels.workload
      namespace $.kubernetes.namespace_name
    </labels>
  </metric>
</filter>

# reload rules with
# promtool check rules /home/ppalucki/wca_remote_pycharm/example/k8s_monitoring/prometheus/prometheus.rules.yaml && pkill -HUP prometheus

groups:
# ----------------------------- APP -------------------------------------
- name: app
  rules:
  # simple/straightforward rules (task raw date aggregation)
  - record: app__memory_access_rate_over_15s
    expr: avg(rate(task__mem_inst_retired_all_loads__rd081[15s]) + rate(task__mem_inst_retired_all_stores__rd082[15s])) by (app) / 1e9
  - record: app__bw  # GB/s
    expr: avg(rate(task__memory_bandwidth[15s])) by (app) / 1e9
  - record: app__wss # GB
    expr: avg(avg_over_time(task__wss_referenced_mb[15s])) by (app) / 1000
  - record: app__rss # GB
    expr: avg by(app) (avg_over_time(task__memory_usage_per_task_bytes[15s])) / 1e9
  - record: app__tlb_misses
    expr: avg(task__dtlb_load_misses_ratio) by (app)
  # Depends on context
  - record: app__tlb_miss_ratio
    expr: avg(task__dtlb_load_misses_ratio) by (app)
  - record: app__dram_hit
    expr: avg(task__dram_hit) by (app)
  - record: app__dram_miss
    expr: avg(task__dram_miss) by (app)
  ### Consumer/Producer analysis
  - record: app__rw
    expr: avg(task__memory_rw_ratio) by (app)
  - record: app__count
    expr: count(task__last_seen) by (app)

  ### I. Cache utilization (PawelP)
  # Metrics for cache-utilization metric
  - record: app__cache_locality
    expr: app__bw / app__wss
  # Cache utilization = RW * (BW/WSS) * (BW/100)
  - record: app__cache_utilization
    expr: app__cache_locality * app__rw * app__memory_intensivity
  # Memory utilization = WSS/RSS
  - record: app__memory_utilization
    expr: app__wss / app__rss
  # Memory intesivity
  - record: app__memory_intensivity
    expr: app__bw / 100  # Assume all nodes has max 100GB membw
  ### IV. Contention sensitivity
  - record: app__contention_sensitivity
    expr: app__rw / app__memory_utilization

  ### II. 2LM Friend (MaciejM)
  # 2LM Friend = RW / (BW * WSS)
  - record: app__2lm_friend
    expr: app__rw / (app__bw*app__wss)

  ### III. RSS to WSS ratio (TomaszP)
  # RSS/WSS or WSS/RSS
  - record: app__rss_wss_ratio
    expr: app__rss / app__wss



# ----------------------------- NODE -------------------------------------
- name: node
  rules:
  #### raw based on platform_ and _task
  # node based on platform
  - record: node__dram_hit
    expr: sum(avg_over_time(platform__dram_hit[15s])) by(node)
  - record: node__total_rss
    expr: sum by(node) (platform__memory_usage)
  # node based on tasks
  - record: node__total_memory_stalls
    expr: sum by(node) (rate(task__memstalls__ra310[15s]))
  - record: node__total_wss
    expr: sum by(node) (task__wss_referenced_mb)

  ### cache contention = (1 - dram_hit^2) * 100
  - record: node__cache_contention
    expr: (1 - (node__dram_hit * node__dram_hit)) * 100
  - record: node__cache_utilization_class
    expr: avg by(node) (avg_over_time(appnode__cache_utilization[15s]))
  - record: node__contention_risk
    expr: 1 - node__dram_hit

# ----------------------------- CLUSTER -------------------------------------
- name: cluster
  rules:
  # over appsj
  - {record: cluster__cache_utilization,        expr: sum(app__cache_utilization)     }
  - {record: cluster__rw,                       expr: sum(app__rw)                    }
  - {record: cluster__2lm_friend,               expr: sum(app__2lm_friend)            }
  - {record: cluster__contention_sensitivity,   expr: sum(app__contention_sensitivity)}
  # over nodes
  - {record: cluster__dram_hit,                 expr: sum(node__dram_hit)             }
  - {record: cluster__cache_contention,         expr: sum(node__cache_contention)     }
  - {record: cluster__contention_risk,          expr: sum(node__contention_risk)      }

# ------------------------------ APP NORMALZIED TO CLUSTER STATE ----------------
- name: appnorm
  rules:
  # Cache utilization normalized to cluster avg_app_utilization
  - record: appnorm__cache_utilization
    expr: app__cache_utilization / scalar(cluster__cache_utilization)
  - record: appnorm__rw
    expr: app__rw / scalar(cluster__rw)
  - record: appnorm__contention_sensitivity
    expr: app__contention_sensitivity / scalar(cluster__contention_sensitivity)
  - record: appnorm__contention_insensitivity
    expr: 1 - appnorm__contention_sensitivity

# ------------------------------ NODE NORMALIZED TO CLUSTER STATE ---------------
- name: nodenorm
  rules:
  # Cache utilization normalized to cluster avg_app_utilization
  - record: nodenorm__cache_contention
    expr: node__cache_contention / scalar(cluster__cache_contention)
  - record: nodenorm__contention_risk
    expr: node__contention_risk / scalar(cluster__contention_risk)

# https://stats.stackexchange.com/questions/10289/whats-the-difference-between-normalization-and-standardization
- name: scaled
  rules:
  - record: scaled__node_contention_risk
    expr: (nodenorm__contention_risk - scalar(min(nodenorm__contention_risk))) / (scalar(max(nodenorm__contention_risk)) - scalar(min(nodenorm__contention_risk)))
  - record: scaled__app_contention_sensitivity
    expr: (appnorm__contention_sensitivity - scalar(min(appnorm__contention_sensitivity))) / (scalar(max(appnorm__contention_sensitivity)) - scalar(min(appnorm__contention_sensitivity)))
  - record: scaled__app_contention_insensitivity
    expr: (appnorm__contention_insensitivity - scalar(min(appnorm__contention_insensitivity))) / (scalar(max(appnorm__contention_insensitivity)) - scalar(min(appnorm__contention_insensitivity)))

# ----------------------------- APPNODE -------------------------------------
- name: aep_appnode
  rules:
  - record: appnode__memory_bandwidth_rate_15s_gb
    expr: avg(rate(task__memory_bandwidth[15s])) by (app, node) / 1e9
  - record: appnode__wss_avg_15s_gb
    expr: avg(avg_over_time(task__wss_referenced_mb[15s])) by (app, node) / 1000
  - record: appnode__memory_intensivity
    expr: appnode__memory_bandwidth_rate_15s_gb / 100  # Assume all nodes has max 100GB membw
  - record: appnode__memory_access_locality
    expr: appnode__memory_bandwidth_rate_15s_gb / appnode__wss_avg_15s_gb
  - record: appnode__memory_rw_ratio
    expr: avg(task__memory_rw_ratio) by (app, node)
  - record: appnode__cache_utilization
    expr: appnode__memory_access_locality * appnode__memory_rw_ratio * appnode__memory_intensivity
  - record: appnode__count
    expr: count(task__last_seen) by (app, node)

# ------------------------------ FIT v2 ------------------------------------------------------
#
- name: fit
  rules:
  - record: fit
    expr: abs( scaled__app_contention_sensitivity - on() group_left(node) scaled__node_contention_risk{node="node11"} )
  - record: fit
    expr: abs( scaled__app_contention_sensitivity - on() group_left(node) scaled__node_contention_risk{node="node12"} )
  - record: fit
    expr: abs( scaled__app_contention_sensitivity - on() group_left(node) scaled__node_contention_risk{node="node13"} )
  - record: fit
    expr: abs( scaled__app_contention_sensitivity - on() group_left(node) scaled__node_contention_risk{node="node14"} )
  - record: fit_avg
    expr: avg_over_time(fit{node="node11"}[15s])
  - record: fit_avg
    expr: avg_over_time(fit{node="node12"}[15s])
  - record: fit_avg
    expr: avg_over_time(fit{node="node13"}[15s])
  - record: fit_avg
    expr: avg_over_time(fit{node="node14"}[15s])

# ----------------------------- FIT (according (node_cache_utilization-app_cache_utilization) -------------------------------------
#- name: aep_apps_fits
#
#  rules:
#  - record: fit
#    expr: abs( (app__wss_rss_ratio) - on() group_left(node) node__dram_hit{node="node11"} )
#    labels:
#      mode: rsswss
#  - record: fit
#    expr: abs( (app__wss_rss_ratio) - on() group_left(node) node__dram_hit{node="node12"} )
#    labels:
#      mode: rsswss
#  - record: fit
#    expr: abs( (app__wss_rss_ratio) - on() group_left(node) node__dram_hit{node="node13"} )
#    labels:
#      mode: rsswss
#  - record: fit
#    expr: abs( (app__wss_rss_ratio) - on() group_left(node) node__dram_hit{node="node14"} )
#    labels:
#      mode: rsswss
#
#  - record: fit
#    expr: 1 / abs(app__cache_utilization - on() group_left(node) node__cache_utilization_class{node="node11"})
#    labels:
#      mode: cacheutil
#  - record: fit
#    expr: 1 / abs(app__cache_utilization - on() group_left(node) node__cache_utilization_class{node="node12"})
#    labels:
#      mode: cacheutil
#  - record: fit
#    expr: 1 / abs(app__cache_utilization - on() group_left(node) node__cache_utilization_class{node="node13"})
#    labels:
#      mode: cacheutil
#  - record: fit
#    expr: 1 / abs(app__cache_utilization - on() group_left(node) node__cache_utilization_class{node="node14"})
#    labels:
#      mode: cacheutil
#
#
#  - record: fit
#    expr: 1 / abs(app__cache_utilization - on() group_left(node) node__cache_utilization_class{node="node11"})
#    labels:
#      mode: 2lmfriend
#  - record: fit
#    expr: 1 / abs(app__cache_utilization - on() group_left(node) node__cache_utilization_class{node="node12"})
#    labels:
#      mode: 2lmfriend
#  - record: fit
#    expr: 1 / abs(app__cache_utilization - on() group_left(node) node__cache_utilization_class{node="node13"})
#    labels:
#      mode: 2lmfriend
#  - record: fit
#    expr: 1 / abs(app__cache_utilization - on() group_left(node) node__cache_utilization_class{node="node14"})
#    labels:
#      mode: 2lmfriend


####################################################################################
# DERIVED
####################################################################################

# ----------------------------- TASK_DERIVED -------------------------------------
- name: wca_task_derived
  rules:
  - record: task__dram_hit
    expr: rate(task__mem_load_retired_local_dram__rd301[15s]) / (rate(task__mem_load_retired_local_pmm__rd180[15s]) + rate(task__mem_load_retired_local_dram__rd301[15s]))
  - record: task__dram_miss
    expr: rate(task__mem_load_retired_local_pmm__rd180[15s]) / rate(task__mem_inst_retired_all_loads__rd081[15s])
  - record: task__memory_rw_ratio
    expr: rate(task__mem_inst_retired_all_loads__rd081[15s]) / rate(task__mem_inst_retired_all_stores__rd082[15s])
  - record: task__dtlb_load_misses_ratio
    expr: task__dtlb_load_misses__r080e / task__mem_inst_retired_all_loads__rd081


# ----------------------------- PLATFORM (derived) ---------------------------------
- name: wca_platform_derived
  rules:
  # PMM
  - record: platform__pmm_reads_mb_per_second
    expr: rate(platform__pmm_bandwidth_read[15s]) * 64 / 1e6
  - record: platform__pmm_writes_mb_per_second
    expr: rate(platform__pmm_bandwidth_write[15s]) * 64 / 1e6
  - record: platform__pmm_total_mb_per_second
    expr: platform__pmm_reads_mb_per_second + platform__pmm_writes_mb_per_second

  # DRAM
  - record: platform__dram_reads_mb_per_second
    expr: rate(platform__cas_count_read[15s]) * 64 / 1e6
  - record: platform__dram_writes_mb_per_second
    expr: rate(platform__cas_count_write[15s]) * 64 / 1e6
  - record: platform__dram_total_mb_per_second
    expr: platform__dram_reads_mb_per_second + platform__dram_writes_mb_per_second

  # HIT
  - record: platform__dram_hit
    expr: platform__dram_total_mb_per_second / (platform__pmm_total_mb_per_second + platform__dram_total_mb_per_second)


